diff --git a/drivers/usb/gadget/function/f_mass_storage.c b/drivers/usb/gadget/function/f_mass_storage.c
index 336b901..ed0f202 100644
--- a/drivers/usb/gadget/function/f_mass_storage.c
+++ b/drivers/usb/gadget/function/f_mass_storage.c
@@ -1228,7 +1228,12 @@ static int do_inquiry(struct fsg_common *common, struct fsg_buffhd *bh)
 	buf[5] = 0;		/* No special options */
 	buf[6] = 0;
 	buf[7] = 0;
-	memcpy(buf + 8, common->inquiry_string, sizeof common->inquiry_string);
+	if (curlun->inquiry_string[0])
+		memcpy(buf + 8, curlun->inquiry_string,
+		       sizeof(curlun->inquiry_string));
+	else
+		memcpy(buf + 8, common->inquiry_string,
+		       sizeof(common->inquiry_string));
 	return 36;
 }
 
@@ -2810,6 +2815,14 @@ static ssize_t removable_show(struct device *dev, struct device_attribute *attr,
 	return fsg_show_removable(curlun, buf);
 }
 
+static ssize_t inquiry_string_show(struct device *dev, struct device_attribute *attr,
+			  char *buf)
+{
+	struct fsg_lun		*curlun = fsg_lun_from_dev(dev);
+
+	return fsg_show_inquiry_string(curlun, buf);
+}
+
 static ssize_t file_show(struct device *dev, struct device_attribute *attr,
 			 char *buf)
 {
@@ -2853,6 +2866,14 @@ static ssize_t removable_store(struct device *dev, struct device_attribute *attr
 	return fsg_store_removable(curlun, buf, count);
 }
 
+static ssize_t inquiry_string_store(struct device *dev, struct device_attribute *attr,
+			   const char *buf, size_t count)
+{
+	struct fsg_lun		*curlun = fsg_lun_from_dev(dev);
+
+	return fsg_store_inquiry_string(curlun, buf, count);
+}
+
 static ssize_t file_store(struct device *dev, struct device_attribute *attr,
 			  const char *buf, size_t count)
 {
@@ -2866,6 +2887,7 @@ static DEVICE_ATTR_RW(cdrom);
 static DEVICE_ATTR_RW(ro);
 static DEVICE_ATTR_RW(nofua);
 static DEVICE_ATTR_RW(removable);
+static DEVICE_ATTR_RW(inquiry_string);
 static DEVICE_ATTR_RW(file);
 static DEVICE_ATTR(perf, 0644, fsg_show_perf, fsg_store_perf);
 
@@ -3146,6 +3168,9 @@ static inline int fsg_common_add_sysfs(struct fsg_common *common,
 	if (rc)
 		goto error;
 	rc = device_create_file(&lun->dev, &dev_attr_removable);
+	if (rc)
+		goto error;
+	rc = device_create_file(&lun->dev, &dev_attr_inquiry_string);
 	if (rc)
 		goto error;
 	rc = device_create_file(&lun->dev, &dev_attr_file);
@@ -3601,12 +3626,30 @@ static struct fsg_lun_opts_attribute fsg_lun_opts_nofua =
 	__CONFIGFS_ATTR(nofua, S_IRUGO | S_IWUSR, fsg_lun_opts_nofua_show,
 			fsg_lun_opts_nofua_store);
 
+static ssize_t fsg_lun_opts_inquiry_string_show(struct fsg_lun_opts *opts,
+						char *page)
+{
+	return fsg_show_inquiry_string(opts->lun, page);
+}
+
+static ssize_t fsg_lun_opts_inquiry_string_store(struct fsg_lun_opts *opts,
+						 const char *page, size_t len)
+{
+	return fsg_store_inquiry_string(opts->lun, page, len);
+}
+
+static struct fsg_lun_opts_attribute fsg_lun_opts_inquiry_string =
+	__CONFIGFS_ATTR(inquiry_string, S_IRUGO | S_IWUSR,
+			fsg_lun_opts_inquiry_string_show,
+			fsg_lun_opts_inquiry_string_store);
+
 static struct configfs_attribute *fsg_lun_attrs[] = {
 	&fsg_lun_opts_file.attr,
 	&fsg_lun_opts_ro.attr,
 	&fsg_lun_opts_removable.attr,
 	&fsg_lun_opts_cdrom.attr,
 	&fsg_lun_opts_nofua.attr,
+	&fsg_lun_opts_inquiry_string.attr,
 	NULL,
 };
 
diff --git a/drivers/usb/gadget/function/f_mass_storage.h b/drivers/usb/gadget/function/f_mass_storage.h
index e91723a..bf26d04 100644
--- a/drivers/usb/gadget/function/f_mass_storage.h
+++ b/drivers/usb/gadget/function/f_mass_storage.h
@@ -100,6 +100,7 @@ struct fsg_lun_config {
 	char removable;
 	char cdrom;
 	char nofua;
+	char inquiry_string[INQUIRY_MAX_LEN];
 };
 
 struct fsg_config {
diff --git a/drivers/usb/gadget/function/storage_common.c b/drivers/usb/gadget/function/storage_common.c
index 990df221c6299..8fbf6861690d2 100644
--- a/drivers/usb/gadget/function/storage_common.c
+++ b/drivers/usb/gadget/function/storage_common.c
@@ -369,6 +369,12 @@ ssize_t fsg_show_removable(struct fsg_lun *curlun, char *buf)
 }
 EXPORT_SYMBOL_GPL(fsg_show_removable);
 
+ssize_t fsg_show_inquiry_string(struct fsg_lun *curlun, char *buf)
+{
+	return sprintf(buf, "%s\n", curlun->inquiry_string);
+}
+EXPORT_SYMBOL_GPL(fsg_show_inquiry_string);
+
 /*
  * The caller must hold fsg->filesem for reading when calling this function.
  */
@@ -499,4 +505,22 @@ ssize_t fsg_store_removable(struct fsg_lun *curlun, const char *buf,
 }
 EXPORT_SYMBOL_GPL(fsg_store_removable);
 
+ssize_t fsg_store_inquiry_string(struct fsg_lun *curlun, const char *buf,
+				 size_t count)
+{
+	const size_t len = min(count, sizeof(curlun->inquiry_string));
+
+	if (len == 0 || buf[0] == '\n') {
+		curlun->inquiry_string[0] = 0;
+	} else {
+		snprintf(curlun->inquiry_string,
+			 sizeof(curlun->inquiry_string), "%-28s", buf);
+		if (curlun->inquiry_string[len-1] == '\n')
+			curlun->inquiry_string[len-1] = ' ';
+	}
+
+	return count;
+}
+EXPORT_SYMBOL_GPL(fsg_store_inquiry_string);
+
 MODULE_LICENSE("GPL");
diff --git a/drivers/usb/gadget/function/storage_common.h b/drivers/usb/gadget/function/storage_common.h
index c3544e61da669..e69848994cb46 100644
--- a/drivers/usb/gadget/function/storage_common.h
+++ b/drivers/usb/gadget/function/storage_common.h
@@ -88,6 +88,12 @@ do {									\
 #define ASC(x)		((u8) ((x) >> 8))
 #define ASCQ(x)		((u8) (x))
 
+/*
+ * Vendor (8 chars), product (16 chars), release (4 hexadecimal digits) and NUL
+ * byte
+ */
+#define INQUIRY_MAX_LEN ((size_t) (8 + 16 + 4 + 1))
+
 struct fsg_lun {
 	struct file	*filp;
 	loff_t		file_length;
@@ -112,6 +118,7 @@ struct fsg_lun {
 	struct device	dev;
 	const char	*name;		/* "lun.name" */
 	const char	**name_pfx;	/* "function.name" */
+	char		inquiry_string[INQUIRY_MAX_LEN];
 };
 
 static inline bool fsg_lun_is_open(struct fsg_lun *curlun)
@@ -131,11 +137,6 @@ static inline bool fsg_lun_is_open(struct fsg_lun *curlun)
 
 /* Maximal number of LUNs supported in mass storage function */
 #define FSG_MAX_LUNS	8
-/*
- * Vendor (8 chars), product (16 chars), release (4 hexadecimal
- * digits) and NULL byte
- */
-#define INQUIRY_MAX_LEN	29
 #define LUN_NAME_LEN	8
 
 enum fsg_buffer_state {
@@ -210,6 +217,7 @@ ssize_t fsg_show_ro(struct fsg_lun *curlun, char *buf);
 ssize_t fsg_show_nofua(struct fsg_lun *curlun, char *buf);
 ssize_t fsg_show_file(struct fsg_lun *curlun, struct rw_semaphore *filesem,
 		      char *buf);
+ssize_t fsg_show_inquiry_string(struct fsg_lun *curlun, char *buf);
 ssize_t fsg_show_cdrom(struct fsg_lun *curlun, char *buf);
 ssize_t fsg_show_removable(struct fsg_lun *curlun, char *buf);
 ssize_t fsg_store_ro(struct fsg_lun *curlun, struct rw_semaphore *filesem,
@@ -221,5 +229,7 @@ ssize_t fsg_store_cdrom(struct fsg_lun *curlun, struct rw_semaphore *filesem,
 			const char *buf, size_t count);
 ssize_t fsg_store_removable(struct fsg_lun *curlun, const char *buf,
 			    size_t count);
+ssize_t fsg_store_inquiry_string(struct fsg_lun *curlun, const char *buf,
+				 size_t count);
 ssize_t fsg_show_perf(struct device *dev, struct device_attribute *attr,
 				char *buf);
 ssize_t fsg_store_perf(struct device *dev, struct device_attribute *attr,
